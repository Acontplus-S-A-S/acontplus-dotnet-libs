<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Acontplus.Core</name>
    </assembly>
    <members>
        <member name="T:Acontplus.Core.Abstractions.Persistence.IRepository`2">
            <summary>
            Defines generic data access operations for entities.
            </summary>
            TEntity: The type of the entity.
            TId: The type of the entity's primary key must be not null.
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.GetByIdAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Retrieves an entity by its primary key.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets the first entity matching a predicate, with optional includes.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.GetAllAsync(System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Retrieves all entities, with optional includes.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds entities matching a predicate, with optional includes.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.FindAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets entities as an IAsyncEnumerable for memory-efficient streaming.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.GetPagedAsync(Acontplus.Core.DTOs.Requests.PaginationDto,System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Gets a paged result of all entities with optional sorting.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.GetPagedAsync(Acontplus.Core.DTOs.Requests.PaginationDto,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets a paged result of filtered entities, with optional includes and sorting.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.GetPagedProjectionAsync``1(Acontplus.Core.DTOs.Requests.PaginationDto,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Gets a projected paged result for efficient data transfer.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Checks if any entity matches the predicate.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Counts entities matching the predicate.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.LongCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Counts entities matching the predicate as a long for large datasets.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Adds a new entity. Persisted by UnitOfWork.SaveChangesAsync.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Adds multiple entities efficiently. Persisted by UnitOfWork.SaveChangesAsync.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Marks an entity for update. Persisted by UnitOfWork.SaveChangesAsync.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.UpdateRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Marks multiple entities for update. Persisted by UnitOfWork.SaveChangesAsync.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.UpdatePropertiesAsync(`0,System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Updates specific properties of an entity. Persisted by UnitOfWork.SaveChangesAsync.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Marks an entity for deletion. Persisted by UnitOfWork.SaveChangesAsync.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.DeleteByIdAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Marks an entity for deletion by ID. Persisted by UnitOfWork.SaveChangesAsync.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.DeleteRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Marks multiple entities for deletion. Persisted by UnitOfWork.SaveChangesAsync.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Marks entities matching a predicate for deletion. Persisted by UnitOfWork.SaveChangesAsync.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.BulkDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Performs a bulk delete directly in the database using ExecuteDeleteAsync.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.BulkUpdateAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Threading.CancellationToken)">
            <summary>
            Performs a bulk update directly in the database using ExecuteUpdateAsync.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.BulkInsertAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Performs a bulk insert operation for better performance with large datasets.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.FindWithSpecificationAsync(Acontplus.Core.Abstractions.Persistence.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Finds entities using a specification.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.GetFirstOrDefaultWithSpecificationAsync(Acontplus.Core.Abstractions.Persistence.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Gets the first entity using a specification.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.GetPagedWithSpecificationAsync(Acontplus.Core.Abstractions.Persistence.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Gets a paged result of entities using a specification.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.FindProjectionWithSpecificationAsync``1(Acontplus.Core.Abstractions.Persistence.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Gets a projected result using a specification for efficient data transfer.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.CountWithSpecificationAsync(Acontplus.Core.Abstractions.Persistence.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Counts entities using a specification.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.GetOrderedAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken,System.ValueTuple{System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean}[])">
            <summary>
            Gets entities with complex ordering options.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.AggregateAsync``1(System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{`0},``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Performs aggregation operations on entities.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.IRepository`2.GetDistinctAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets distinct values for a specific property.
            </summary>
        </member>
        <member name="T:Acontplus.Core.Abstractions.Persistence.BaseSpecification`1">
            <summary>
            An updated base class for creating specifications.
            It's designed to be extended by concrete specifications that can interpret a PaginationDto.
            </summary>
            <typeparam name="T">The type of the entity this specification is for.</typeparam>
        </member>
        <member name="M:Acontplus.Core.Abstractions.Persistence.BaseSpecification`1.ApplyPaging(Acontplus.Core.DTOs.Requests.PaginationDto)">
            <summary>
            Applies pagination using the entire DTO, which also enables paging.
            </summary>
        </member>
        <member name="T:Acontplus.Core.Domain.Common.AuditableEntity`1">
            <summary>
            Base auditable entity with modern .NET 9+ features and improved audit patterns.
            </summary>
            <typeparam name="TId">The type of the entity's primary key.</typeparam>
        </member>
        <member name="M:Acontplus.Core.Domain.Common.AuditableEntity`1.MarkAsDeleted(`0)">
            <summary>
            Marks the entity as deleted with audit information.
            </summary>
            <param name="deletedByUserId">The user ID who deleted the entity.</param>
        </member>
        <member name="M:Acontplus.Core.Domain.Common.AuditableEntity`1.RestoreFromDeleted">
            <summary>
            Restores the entity from deleted state.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Domain.Common.AuditableEntity`1.Deactivate">
            <summary>
            Deactivates the entity.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Domain.Common.AuditableEntity`1.Activate">
            <summary>
            Activates the entity.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Domain.Common.AuditableEntity`1.UpdateAuditFields(`0)">
            <summary>
            Updates audit fields when the entity is modified.
            </summary>
            <param name="updatedByUserId">The user ID who updated the entity.</param>
        </member>
        <member name="M:Acontplus.Core.Domain.Common.AuditableEntity`1.Create``1(`0,`0,System.Boolean)">
            <summary>
            Creates a new auditable entity with the specified ID and creator.
            </summary>
            <typeparam name="T">The type of the auditable entity.</typeparam>
            <param name="id">The entity ID.</param>
            <param name="createdByUserId">The user ID who created the entity.</param>
            <param name="isMobileRequest">Whether the request came from a mobile device.</param>
            <returns>A new auditable entity instance.</returns>
        </member>
        <member name="T:Acontplus.Core.Domain.Common.DomainErrors">
            <summary>
            Represents multiple domain errors that can occur during validation or complex operations.
            </summary>
            <param name="Errors">Collection of individual domain errors.</param>
        </member>
        <member name="M:Acontplus.Core.Domain.Common.DomainErrors.#ctor(System.Collections.Generic.IReadOnlyList{Acontplus.Core.Domain.Common.DomainError})">
            <summary>
            Represents multiple domain errors that can occur during validation or complex operations.
            </summary>
            <param name="Errors">Collection of individual domain errors.</param>
        </member>
        <member name="P:Acontplus.Core.Domain.Common.DomainErrors.Errors">
            <summary>Collection of individual domain errors.</summary>
        </member>
        <member name="T:Acontplus.Core.Domain.Common.DomainWarnings">
            <summary>
            Represents warnings that don't prevent operation success but should be communicated.
            </summary>
            <param name="Warnings">Collection of individual warnings.</param>
        </member>
        <member name="M:Acontplus.Core.Domain.Common.DomainWarnings.#ctor(System.Collections.Generic.IReadOnlyList{Acontplus.Core.Domain.Common.DomainError})">
            <summary>
            Represents warnings that don't prevent operation success but should be communicated.
            </summary>
            <param name="Warnings">Collection of individual warnings.</param>
        </member>
        <member name="P:Acontplus.Core.Domain.Common.DomainWarnings.Warnings">
            <summary>Collection of individual warnings.</summary>
        </member>
        <member name="T:Acontplus.Core.Domain.Common.SuccessWithWarnings`1">
            <summary>
            Represents a successful result that may also contain warnings.
            </summary>
            <param name="Value">The success value.</param>
            <param name="Warnings">Optional warnings that occurred during the operation.</param>
        </member>
        <member name="M:Acontplus.Core.Domain.Common.SuccessWithWarnings`1.#ctor(`0,System.Nullable{Acontplus.Core.Domain.Common.DomainWarnings})">
            <summary>
            Represents a successful result that may also contain warnings.
            </summary>
            <param name="Value">The success value.</param>
            <param name="Warnings">Optional warnings that occurred during the operation.</param>
        </member>
        <member name="P:Acontplus.Core.Domain.Common.SuccessWithWarnings`1.Value">
            <summary>The success value.</summary>
        </member>
        <member name="P:Acontplus.Core.Domain.Common.SuccessWithWarnings`1.Warnings">
            <summary>Optional warnings that occurred during the operation.</summary>
        </member>
        <member name="T:Acontplus.Core.Domain.Common.Entity`1">
            <summary>
            Base entity class with domain event support and modern .NET 9+ features.
            </summary>
            <typeparam name="TId">The type of the entity's primary key.</typeparam>
        </member>
        <member name="M:Acontplus.Core.Domain.Common.Entity`1.Create``1(`0)">
            <summary>
            Creates a new entity with the specified ID.
            </summary>
            <param name="id">The entity ID.</param>
            <returns>A new entity instance.</returns>
        </member>
        <member name="T:Acontplus.Core.Domain.Common.Result`2">
            <summary>
            Represents a result of an operation that can either succeed or fail.
            Modern .NET 9+ pattern for functional error handling.
            </summary>
            <typeparam name="TValue">The type of the success value.</typeparam>
            <typeparam name="TError">The type of the error.</typeparam>
        </member>
        <member name="T:Acontplus.Core.Domain.Common.Result`1">
            <summary>
            Represents a result of an operation that can either succeed or fail with a standard error type.
            </summary>
            <typeparam name="TValue">The type of the success value.</typeparam>
        </member>
        <member name="T:Acontplus.Core.Extensions.JsonExtensions">
            <summary>
            Modern JSON extensions for .NET enterprise applications
            Provides high-performance, secure JSON operations with System.Text.Json
            </summary>
        </member>
        <member name="P:Acontplus.Core.Extensions.JsonExtensions.DefaultOptions">
            <summary>
            Default JSON serializer options optimized for enterprise applications
            </summary>
        </member>
        <member name="P:Acontplus.Core.Extensions.JsonExtensions.PrettyOptions">
            <summary>
            JSON options for development/debugging with pretty formatting
            </summary>
        </member>
        <member name="P:Acontplus.Core.Extensions.JsonExtensions.StrictOptions">
            <summary>
            Strict JSON options for APIs that require exact matching
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.JsonExtensions.DeserializeModern``1(System.String)">
            <summary>
            Deserialize JSON with enterprise-optimized settings
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.JsonExtensions.DeserializeModernSafe``1(System.String,``0)">
            <summary>
            Safely deserialize JSON with fallback value
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.JsonExtensions.SerializeModern``1(``0,System.Boolean)">
            <summary>
            Serialize object to JSON with enterprise-optimized settings
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.JsonExtensions.CloneViaJson``1(``0)">
            <summary>
            Clone object using JSON serialization (deep clone)
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.NullableExtensions.OrKeep(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Returns the value of a nullable bool if it has a value; otherwise, returns the original.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.NullableExtensions.OrKeep(System.Nullable{System.Int32},System.Int32)">
            <summary>
            Returns the value of a nullable int if it has a value; otherwise, returns the original.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.NullableExtensions.OrKeep(System.Nullable{System.Int64},System.Int64)">
            <summary>
            Returns the value of a nullable long if it has a value; otherwise, returns the original.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.NullableExtensions.OrKeep(System.Nullable{System.Decimal},System.Decimal)">
            <summary>
            Returns the value of a nullable decimal if it has a value; otherwise, returns the original.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.NullableExtensions.OrKeep(System.Nullable{System.Double},System.Double)">
            <summary>
            Returns the value of a nullable double if it has a value; otherwise, returns the original.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.NullableExtensions.OrKeep(System.Nullable{System.DateTime},System.DateTime)">
            <summary>
            Returns the value of a nullable DateTime if it has a value; otherwise, returns the original.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.NullableExtensions.OrKeep(System.String,System.String)">
            <summary>
            Returns the new string if it is not null or whitespace; otherwise, returns the original.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.NullableExtensions.OrKeep``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the new IEnumerable if it is not null or empty; otherwise, returns the original.
            </summary>
        </member>
        <member name="T:Acontplus.Core.Extensions.ResultExtensions">
            <summary>
            Modern extension methods for the Result pattern to improve developer experience.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.ResultExtensions.ToApiResponse``1(Acontplus.Core.Domain.Common.Result{``0},System.String)">
            <summary>
            Converts a Result to an ApiResponse.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.ResultExtensions.ToApiResponse``1(Acontplus.Core.Domain.Common.Result{``0},System.String,System.String)">
            <summary>
            Converts a Result to an ApiResponse with custom success message.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.ResultExtensions.Bind``2(Acontplus.Core.Domain.Common.Result{``0},System.Func{``0,Acontplus.Core.Domain.Common.Result{``1}})">
            <summary>
            Binds a Result to another Result using a function.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.ResultExtensions.BindAsync``2(Acontplus.Core.Domain.Common.Result{``0},System.Func{``0,System.Threading.Tasks.Task{Acontplus.Core.Domain.Common.Result{``1}}})">
            <summary>
            Binds a Result to another Result using an async function.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.ResultExtensions.Map``2(Acontplus.Core.Domain.Common.Result{``0},System.Func{``0,``1})">
            <summary>
            Maps a Result to another Result using a function.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.ResultExtensions.MapAsync``2(Acontplus.Core.Domain.Common.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Maps a Result to another Result using an async function.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.ResultExtensions.Tap``1(Acontplus.Core.Domain.Common.Result{``0},System.Action{``0})">
            <summary>
            Executes an action on success and returns the original result.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.ResultExtensions.TapAsync``1(Acontplus.Core.Domain.Common.Result{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Executes an async action on success and returns the original result.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.ResultExtensions.TapError``1(Acontplus.Core.Domain.Common.Result{``0},System.Action{Acontplus.Core.Domain.Common.DomainError})">
            <summary>
            Executes an action on failure and returns the original result.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.ResultExtensions.TapErrorAsync``1(Acontplus.Core.Domain.Common.Result{``0},System.Func{Acontplus.Core.Domain.Common.DomainError,System.Threading.Tasks.Task})">
            <summary>
            Executes an async action on failure and returns the original result.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.ResultExtensions.ToResult``1(``0,Acontplus.Core.Domain.Common.DomainError)">
            <summary>
            Converts a nullable value to a Result.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.ResultExtensions.ToResult``1(``0,System.String,System.String)">
            <summary>
            Converts a nullable value to a Result with a custom error message.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.ResultExtensions.ToResult``1(System.Boolean,``0,Acontplus.Core.Domain.Common.DomainError)">
            <summary>
            Converts a boolean condition to a Result.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Extensions.ResultExtensions.ToResult``1(System.Boolean,``0,System.String,System.String)">
            <summary>
            Converts a boolean condition to a Result with a custom error message.
            </summary>
        </member>
        <member name="M:Acontplus.Core.Validation.XmlValidator.Validate(System.Xml.XmlDocument,System.IO.Stream)">
            <summary>
                Validates the provided XmlDocument against an XSD schema file.
            </summary>
            <param name="xmlDocument">The XML document to validate.</param>
            <param name="xsdFilePath">The path to the XSD file.</param>
            <returns>A list of ValidationError objects containing error details.</returns>
        </member>
        <member name="M:Acontplus.Core.Validation.XmlValidator.ExportErrorsToJson(System.Collections.Generic.List{Acontplus.Core.Validation.ValidationError},System.String)">
            <summary>
                Exports validation errors to a JSON file.
            </summary>
            <param name="errors">List of validation errors.</param>
            <param name="outputFilePath">The path to save the JSON file.</param>
        </member>
        <member name="M:Acontplus.Core.Validation.XmlValidator.CleanXmlForSqlServer(System.String)">
            <summary>
            Limpia un XML para hacerlo compatible con SQL Server
            </summary>
        </member>
        <member name="M:Acontplus.Core.Validation.XmlValidator.CleanHtmlTags(System.String)">
            <summary>
            Limpia etiquetas HTML que pueden estar mezcladas con XML
            </summary>
        </member>
        <member name="M:Acontplus.Core.Validation.XmlValidator.ConvertHtmlEntitiesToXml(System.String)">
            <summary>
            Convierte entidades HTML a sus equivalentes XML válidos
            </summary>
        </member>
        <member name="M:Acontplus.Core.Validation.XmlValidator.RemoveOrConvertHtmlTags(System.String)">
            <summary>
            Elimina o convierte etiquetas HTML problemáticas
            </summary>
        </member>
        <member name="M:Acontplus.Core.Validation.XmlValidator.CleanHtmlAttributes(System.String)">
            <summary>
            Limpia atributos HTML que pueden no ser válidos en XML
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Acontplus.Core.Validation.XmlValidator.EscapeUnescapedAmpersands(System.String)" -->
        <member name="M:Acontplus.Core.Validation.XmlValidator.RemoveBomChars(System.String)">
            <summary>
            Elimina caracteres BOM (Byte Order Mark) que pueden causar problemas de codificación
            </summary>
        </member>
        <member name="M:Acontplus.Core.Validation.XmlValidator.NormalizeLineBreaks(System.String)">
            <summary>
            Normaliza los saltos de línea para evitar problemas con diferentes sistemas operativos
            </summary>
        </member>
        <member name="M:Acontplus.Core.Validation.XmlValidator.RemoveInvalidXmlChars(System.String)">
            <summary>
            Elimina caracteres que no son válidos en XML según la especificación
            </summary>
        </member>
        <member name="M:Acontplus.Core.Validation.XmlValidator.RemoveXmlDeclaration(System.String)">
            <summary>
            Método original para eliminar declaración XML
            </summary>
        </member>
        <member name="M:Acontplus.Core.Validation.XmlValidator.AggressiveHtmlClean(System.String)">
            <summary>
            Método alternativo más agresivo para casos extremos donde hay mucho HTML mezclado
            </summary>
        </member>
    </members>
</doc>
