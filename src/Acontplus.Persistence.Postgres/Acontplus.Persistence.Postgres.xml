<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Acontplus.Persistence.Postgres</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "M:Acontplus.Persistence.Postgres.Configurations.AuditableEntityRegistration.GetPrimaryKeyType(System.Type)" -->
        <member name="M:Acontplus.Persistence.Postgres.Configurations.AuditableEntityRegistration.RegisterEntities(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.Collections.Generic.Dictionary{System.Type,System.ValueTuple{System.String,System.String}},System.Collections.Generic.Dictionary{System.Type,System.Type},System.Type[])">
            <summary>
            Registers auditable entities with the ModelBuilder, applying base configurations,
            custom schema/table names, and optional specific entity configurations.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Configurations.AuditableEntityRegistration.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Helper method to check if a type is assignable to a generic type definition
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Configurations.AuditableEntityRegistration.RegisterEntities(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.Type[])">
            <summary>
            Registers entities with default conventions and base configuration.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Configurations.AuditableEntityRegistration.RegisterEntitiesWithSchemas(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.ValueTuple{System.Type,System.String}[])">
            <summary>
            Registers entities, explicitly setting schemas for specified types.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Configurations.AuditableEntityRegistration.RegisterEntitiesWithNames(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.ValueTuple{System.Type,System.String,System.String}[])">
            <summary>
            Registers entities, explicitly setting schema and/or table names for specified types.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Configurations.AuditableEntityRegistration.RegisterEntitiesWithCustomConfigurations(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.Collections.Generic.Dictionary{System.Type,System.Type},System.Type[])">
            <summary>
            Registers entities with specific custom configurations.
            </summary>
        </member>
        <member name="T:Acontplus.Persistence.Postgres.Configurations.EntityTypeConfiguration`2">
            <summary>
            Base configuration for non-auditable entities.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Acontplus.Persistence.Postgres.Configurations.SimpleEntityRegistration.GetPrimaryKeyType(System.Type)" -->
        <member name="M:Acontplus.Persistence.Postgres.Configurations.SimpleEntityRegistration.RegisterEntities(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.Collections.Generic.Dictionary{System.Type,System.ValueTuple{System.String,System.String}},System.Collections.Generic.Dictionary{System.Type,System.Type},System.Type[])">
            <summary>
            Registers non-auditable entities with the ModelBuilder, applying base configurations,
            custom schema/table names, and optional specific entity configurations.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Configurations.SimpleEntityRegistration.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Helper method to check if a type is assignable to a generic type definition
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Configurations.SimpleEntityRegistration.RegisterEntities(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.Type[])">
            <summary>
            Registers entities with default conventions and base configuration.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Configurations.SimpleEntityRegistration.RegisterEntitiesWithSchemas(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.ValueTuple{System.Type,System.String}[])">
            <summary>
            Registers entities, explicitly setting schemas for specified types.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Configurations.SimpleEntityRegistration.RegisterEntitiesWithNames(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.ValueTuple{System.Type,System.String,System.String}[])">
            <summary>
            Registers entities, explicitly setting schema and/or table names for specified types.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Configurations.SimpleEntityRegistration.RegisterEntitiesWithCustomConfigurations(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.Collections.Generic.Dictionary{System.Type,System.Type},System.Type[])">
            <summary>
            Registers entities with specific custom configurations.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.DependencyInjection.PostgresServiceCollectionExtensions.AddPostgresPersistence``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Object)">
            <summary>
            Registers a PostgreSQL DbContext and its corresponding UnitOfWork implementation,
            optionally with a service key using .NET 8+ keyed DI.
            </summary>
            <typeparam name="TContext">The DbContext type to register.</typeparam>
            <param name="services">The IServiceCollection.</param>
            <param name="postgresOptions">The PostgreSQL-specific options for DbContext.</param>
            <param name="serviceKey">Optional key to register the services with (for keyed DI).</param>
            <returns>The updated IServiceCollection.</returns>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Exceptions.PostgresExceptionTranslator.FindNpgsqlException(System.Exception)">
            <summary>
            Recursively searches for NpgsqlException in the exception chain
            </summary>
        </member>
        <member name="T:Acontplus.Persistence.Postgres.Exceptions.UnitOfWorkException">
            <summary>
            Exception thrown when an error occurs within the UnitOfWork operations.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Exceptions.UnitOfWorkException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Acontplus.Persistence.Postgres.Exceptions.UnitOfWorkException"/> class.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Exceptions.UnitOfWorkException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Acontplus.Persistence.Postgres.Exceptions.UnitOfWorkException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Exceptions.UnitOfWorkException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Acontplus.Persistence.Postgres.Exceptions.UnitOfWorkException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Mapping.DbDataReaderMapper.ToListAsync``1(System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
            <summary>
            Maps a DbDataReader to a List of entities of type T with support for records and init-only properties
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Mapping.DbDataReaderMapper.MapToObject``1(System.Data.Common.DbDataReader)">
            <summary>
            Maps a single row from a SqlDataReader to an object of type T using reflection.
            </summary>
        </member>
        <member name="T:Acontplus.Persistence.Postgres.Repositories.AdoRepository">
            <summary>
            Provides ADO.NET data access operations with retry policy and optional transaction sharing.
            Enhanced with SQL Server error handling and domain error mapping.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Repositories.AdoRepository.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{Acontplus.Persistence.Postgres.Repositories.AdoRepository})">
            <summary>
            Constructor for AdoRepository.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Repositories.AdoRepository.SetTransaction(System.Data.Common.DbTransaction)">
            <summary>
            Sets the current database transaction from the Unit of Work.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Repositories.AdoRepository.SetConnection(System.Data.Common.DbConnection)">
            <summary>
            Sets the current database connection from the Unit of Work.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Repositories.AdoRepository.ClearTransaction">
            <summary>
            Clears the current transaction and connection.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Repositories.AdoRepository.GetConnectionString(System.String)">
            <summary>
            Retrieves a connection string from configuration, caching it for subsequent calls.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Repositories.AdoRepository.GetOpenConnectionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates and opens a new SqlConnection.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Repositories.AdoRepository.CreateCommand(System.Data.Common.DbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Acontplus.Core.DTOs.Requests.CommandOptionsDto)">
            <summary>
            Creates and configures a NpgsqlCommand.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Repositories.AdoRepository.QueryAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Acontplus.Core.DTOs.Requests.CommandOptionsDto,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL query and maps results to a list of objects.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Repositories.AdoRepository.GetDataSetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Acontplus.Core.DTOs.Requests.CommandOptionsDto,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL query and returns a DataSet.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Repositories.AdoRepository.ExecuteNonQueryAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Acontplus.Core.DTOs.Requests.CommandOptionsDto,System.Threading.CancellationToken)">
            <summary>
            Executes a non-query SQL command.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Repositories.AdoRepository.QuerySingleOrDefaultAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Acontplus.Core.DTOs.Requests.CommandOptionsDto,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL query designed to return a single row.
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Utilities.TimeZoneHelper.ToEcuadorTime(System.DateTime)">
            <summary>
            OPCIÓN 1 (RECOMENDADA): Convertir UTC a zona horaria específica
            </summary>
        </member>
        <member name="M:Acontplus.Persistence.Postgres.Utilities.TimeZoneHelper.FromEcuadorTimeToUtc(System.DateTime)">
            <summary>
            Convertir de zona horaria local a UTC (para guardar en BD)
            </summary>
        </member>
        <member name="P:Acontplus.Persistence.Postgres.Utilities.TimeZoneHelper.NowInEcuador">
            <summary>
            Obtener la hora actual en Ecuador
            </summary>
        </member>
        <member name="P:Acontplus.Persistence.Postgres.Utilities.TimeZoneHelper.NowInServer">
            <summary>
            Obtener la hora actual del servidor
            </summary>
        </member>
    </members>
</doc>
